Busqueda binaria

1 3 4 7 8 10 13 15 50 101

hay un 20?
podemos iterar sobre todos los elmentos y ver si =20
podemos usar la propiedad de que el arreglo está ordenado
preguntamos por la posicion del medio si es = a 20
          v
1 3 4 7 8 10 13 15 50 101

como 10 no es 20 y es más chico entonces vemos a la izquierda y buscamos en la mitad

            |   v        |
1 3 4 7 8 10 13 15 50 101
15 !=20 y es más chico entonces seguimos buscando en la mitad derecha
                  |    v |
1 3 4 7 8 10 13 15 50 101

101 != a 20 y es más grande entonces buscamos en la mitad izquierda
                  | v |
1 3 4 7 8 10 13 15 50 101

50!= 20 y no podemos seguir buscansdo entonces sabemos q no hay 20 en el arreglo

COMPLEJIDAD -------> O(logn)

podemos usar esta estrategia para buscar el primer elemento que es mayor (o menor)
a algún numero o no sé cualquier cosa ah

Sintaxis de lower_bound / upper_bound

Arreglos:
*lower_bound(a,a+n,x); // para tener el elemento
lower_bound(a,a+n,x)-a; // para tener la posición

Vectores:
*lower_bound(v.begin(),v.end(),x); // para tener el elemento
lower_bound(v.begin(),v.end(),x)-v.begin(); // para tener la posición

Sets:
*st.lower_bound(x); // para tener el elemento
// para tener la posición no se puede eficientemente con sets normales

Aclaración:
x=elemento a buscar
a=nombre del arreglo
n=tamaño del arreglo
v=nombre del vector
st=nombre del set
 
si es q nos devuelve n (el tamaño) es pq nos da la posición que no existe
eso significa q no existe elemento q cumpla con nuestras indicaciones

Código de ejemplo de Búsqueda Binaria (donde x e y son los extremos de la búsqueda binaria, sulen ser 0 y un número muy grande):
l=x,r=y;
while(l <= r) {
  m = (l+r)/2;
  if (can (m)) l=m+1;
  else r=m-1;
}

puede ser de esta otra forma dependiendo de como queremos q se busque

l=x,r=y;
while(l <= r) {
  m = (l+r)/2;
  if (can (m)) r=m-1;
  else l=m+1;
}

Notar que en r queda almacenado el último True y en l queda el primer False

hacer busqueda binaria en la respuesta?  <---------


